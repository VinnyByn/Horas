import { db, collection, addDoc, getDocs } from "./firebase.js";

// Inicializa os arrays de atividades e os limites de horas por categoria
const atividades = []; // Armazena as atividades adicionadas
const limitesCategoria = { // Define os limites de horas por categoria principal
    'Ensino': 90,
    'Extens√£o': 90,
    'Pesquisa': 90
};
const totaisCategoria = { // Armazena o total de horas aprovadas por categoria principal
    'Ensino': 0,
    'Extens√£o': 0,
    'Pesquisa': 0
};
const limitesTipoEspecifico = {}; // Armazena o total acumulado para cada tipo espec√≠fico de atividade

// Inicializa os limites e porcentagens de aproveitamento para atividades espec√≠ficas
const configuracaoTipoEspecifico = {
    "Projeto de Extens√£o": { limite: 40, porcentagem: 0.7 },
    "Atividade cultural": { limite: 5, porcentagem: 0.8 },
    "Visitas T√©cnicas": { limite: 40, porcentagem: 1 },
    "Visitas a Feiras e Exposi√ß√µes": { limite: 5, porcentagem: 0.2 },
    "Cursos de Idiomas": { limite: 20, porcentagem: 0.6 },
    "Palestras, Semin√°rios e Congressos Extensionistas (ouvinte)": { limite: 10, porcentagem: 0.8 },
    "Palestras, Semin√°rios e Congressos Extensionistas (apresentador)": { limite: 15, porcentagem: 1 },
    "Projeto Empresa J√∫nior": { limite: 20, porcentagem: 0.2 },
    "Est√°gio Extracurricular": { limite: 40, porcentagem: 0.7 },
    "Monitoria": { limite: 40, porcentagem: 0.7 },
    "Concursos e campeonatos acad√™micos": { limite: 50, porcentagem: 0.7 },
    "Presen√ßa comprovada a defesas de TCC do curso de Engenharia de Computa√ß√£o": { limite: 3, porcentagem: 0.5 },
    "Cursos Profissionalizantes espec√≠ficos na √°rea": { limite: 40, porcentagem: 0.8 },
    "Cursos Profissionalizantes em geral": { limite: 10, porcentagem: 0.2 },
    "Inicia√ß√£o Cient√≠fica": { limite: 40, porcentagem: 0.7 },
    "Publica√ß√£o de artigos em peri√≥dicos cient√≠ficos": { limite: 10, porcentagem: 0.7 },
    "Publica√ß√£o de artigos completos em anais de congressos": { limite: 7, porcentagem: 1 },
    "Publica√ß√£o de cap√≠tulo de livro": { limite: 7, porcentagem: 1 },
    "Publica√ß√£o de resumos de artigos em anais": { limite: 5, porcentagem: 1 },
    "Registro de patentes como auto/coautor": { limite: 40, porcentagem: 1 },
    "Premia√ß√£o resultante de pesquisa cient√≠fica ": { limite: 10, porcentagem: 1 },
    "Colaborador em atividades como Semin√°rios e Congressos": { limite: 10, porcentagem: 1 },
    "Palestras, Semin√°rios e Congressos de Pesquisa (ouvinte)": { limite: 10, porcentagem: 0.8 },
    "Palestras, Semin√°rios e Congressos de Pesquisa (apresentador)": { limite: 15, porcentagem: 1 }
};

// Define as op√ß√µes de tipos espec√≠ficos organizadas por categoria principal
const opcoesTipoEspecifico = {
    'Extens√£o': [
        "Projeto de Extens√£o",
        "Atividade cultural",
        "Visitas T√©cnicas",
        "Visitas a Feiras e Exposi√ß√µes",
        "Cursos de Idiomas",
        "Palestras, Semin√°rios e Congressos Extensionistas (ouvinte)",
        "Palestras, Semin√°rios e Congressos Extensionistas (apresentador)",
        "Projeto Empresa J√∫nior"
    ],
    'Ensino': [
        "Est√°gio Extracurricular",
        "Monitoria",
        "Concursos e campeonatos acad√™micos",
        "Presen√ßa comprovada a defesas de TCC do curso de Engenharia de Computa√ß√£o",
        "Cursos Profissionalizantes espec√≠ficos na √°rea",
        "Cursos Profissionalizantes em geral"
    ],
    'Pesquisa': [
        "Inicia√ß√£o Cient√≠fica",
        "Publica√ß√£o de artigos em peri√≥dicos cient√≠ficos",
        "Publica√ß√£o de artigos completos em anais de congressos",
        "Publica√ß√£o de cap√≠tulo de livro",
        "Publica√ß√£o de resumos de artigos em anais",
        "Registro de patentes como auto/coautor",
        "Premia√ß√£o resultante de pesquisa cient√≠fica",
        "Colaborador em atividades como Semin√°rios e Congressos",
        "Palestras, Semin√°rios e Congressos de Pesquisa (ouvinte)",
        "Palestras, Semin√°rios e Congressos de Pesquisa (apresentador)"
    ]
};

// Inicializa o resumo por atividade espec√≠fica
const totaisAtividade = {}; // Armazena o total de horas aprovadas para cada tipo espec√≠fico de atividade

// Atualiza as op√ß√µes do tipo espec√≠fico ao mudar a categoria
document.getElementById('categoria').addEventListener('change', function () {
    const categoria = this.value;
    const seletorTipoEspecifico = document.getElementById('tipoEspecifico');
    seletorTipoEspecifico.innerHTML = ''; // Limpa as op√ß√µes anteriores

    if (opcoesTipoEspecifico[categoria]) {
        opcoesTipoEspecifico[categoria].forEach(opcao => {
            const opt = document.createElement('option');
            opt.value = opcao;
            opt.textContent = opcao;
            seletorTipoEspecifico.appendChild(opt);
        });
    }
});

// Fun√ß√£o para adicionar uma nova atividade
// Adiciona evento ao formul√°rio
// Adiciona evento ao formul√°rio
document.getElementById('formAtividade').addEventListener('submit', async function (event) {
    event.preventDefault(); // Evita o reload da p√°gina

    // Coleta os dados do formul√°rio
    const descricao = document.getElementById('descricao').value;
    const categoria = document.getElementById('categoria').value;
    const tipoEspecifico = document.getElementById('tipoEspecifico').value;
    const horas = parseInt(document.getElementById('horas').value);

    if (isNaN(horas) || horas <= 0) {
        alert("O campo 'horas' deve ser um n√∫mero v√°lido e maior que zero.");
        return;
    }

    let horasAprovadas = horas;

    // Verifica se o tipo espec√≠fico tem configura√ß√£o de limite e porcentagem
    if (configuracaoTipoEspecifico[tipoEspecifico]) {
        const { limite, porcentagem } = configuracaoTipoEspecifico[tipoEspecifico];

        // Inicializa o total acumulado para o tipo espec√≠fico, se necess√°rio
        if (!limitesTipoEspecifico[tipoEspecifico]) {
            limitesTipoEspecifico[tipoEspecifico] = 0;
        }

        // Calcula as horas restantes dispon√≠veis para o tipo espec√≠fico
        const horasRestantesTipo = limite - limitesTipoEspecifico[tipoEspecifico];
        horasAprovadas = Math.min(horas * porcentagem, horasRestantesTipo);
    }

    // Verifica o limite da categoria antes de adicionar
    const horasRestantesCategoria = limitesCategoria[categoria] - totaisCategoria[categoria];
    if (horasAprovadas > horasRestantesCategoria) {
        horasAprovadas = horasRestantesCategoria; // Reduz para o m√°ximo permitido na categoria
    }

    // Atualiza os totais de categoria e tipo espec√≠fico
    totaisCategoria[categoria] += horasAprovadas;
    if (!totaisAtividade[tipoEspecifico]) {
        totaisAtividade[tipoEspecifico] = 0;
    }
    totaisAtividade[tipoEspecifico] += horasAprovadas;

    // Atualiza os limites acumulados
    limitesTipoEspecifico[tipoEspecifico] += horasAprovadas;

    // Salva no Firestore
    try {
        await addDoc(collection(db, "atividades"), {
            descricao,
            categoria,
            tipoEspecifico,
            horas,
            horasAprovadas
        });

        alert("Atividade adicionada com sucesso!");
        carregarAtividades(); // Atualiza a tabela
        document.getElementById('formAtividade').reset(); // Limpa o formul√°rio
    } catch (error) {
        console.error("Erro ao salvar no Firestore:", error);
        alert("Erro ao salvar a atividade.");
    }
});


function atualizarTabela() {
    const corpoTabela = document.getElementById('tabelaAtividades');
    corpoTabela.innerHTML = ''; // Limpa o conte√∫do anterior da tabela

    atividades.forEach(atividade => {
        const linha = document.createElement('tr'); // Cria uma nova linha
        linha.innerHTML =
            `<td>${atividade.descricao}</td>
            <td>${atividade.categoria}</td>
            <td>${atividade.tipoEspecifico}</td>
            <td>${atividade.horas}</td>
            <td>${atividade.horasAprovadas !== undefined && atividade.horasAprovadas !== null ? atividade.horasAprovadas.toFixed(2) : "0.00"}</td>`; 
        corpoTabela.appendChild(linha); // Adiciona a linha na tabela
    });
}

function atualizarResumo() {
    const resumoCategoria = document.getElementById('resumoCategoria');
    resumoCategoria.innerHTML = ''; // Limpa antes de atualizar

    for (const categoria in totaisCategoria) {
        if (limitesCategoria[categoria] !== undefined) {
            const limite = limitesCategoria[categoria];
            const atual = totaisCategoria[categoria];

            let textoResumo = `üîπ ${categoria}: Limite √© ${limite}h, Voc√™ tem `;
            
            if (atual > limite) {
                textoResumo += `${limite}h (${atual}h registradas no total)`;
            } else {
                textoResumo += `${atual}h`;
            }

            const itemLista = document.createElement('li');
            itemLista.textContent = textoResumo;
            resumoCategoria.appendChild(itemLista);
        }
    }
}


function atualizarResumoAtividade() {
    const listaResumoAtividade = document.getElementById('resumoAtividade');
    listaResumoAtividade.innerHTML = ''; // Limpa o conte√∫do anterior do resumo

    for (const [atividade, total] of Object.entries(totaisAtividade)) {
        const limite = configuracaoTipoEspecifico[atividade] ? configuracaoTipoEspecifico[atividade].limite : 0; // Obt√©m o limite da atividade, ou 0 se n√£o existir

        let textoResumo = `üîπ ${atividade}: Limite √© ${limite}h, Voc√™ tem `;

        if (total > limite) {
            textoResumo += `${limite}h (${total.toFixed(2)}h registradas no total)`;
        } else {
            textoResumo += `${total.toFixed(2)}h`;
        }

        const itemLista = document.createElement('li');
        itemLista.textContent = textoResumo;
        listaResumoAtividade.appendChild(itemLista);
    }
}



// üõ†Ô∏è Fun√ß√£o para carregar atividades do Firestore e exibir na tabela
async function carregarAtividades() {
    const corpoTabela = document.getElementById('tabelaAtividades');
    corpoTabela.innerHTML = ''; // Limpa a tabela

    // Zerar os totais antes de recalcular
    for (const categoria in totaisCategoria) {
        totaisCategoria[categoria] = 0;
    }
    for (const atividade in totaisAtividade) {
        totaisAtividade[atividade] = 0;
    }

    try {
        const querySnapshot = await getDocs(collection(db, "atividades"));
        querySnapshot.forEach((doc) => {
            const atividade = doc.data();
            console.log("‚úÖ Atividade carregada do Firestore:", atividade);

            // Atualiza os totais por categoria
            if (totaisCategoria[atividade.categoria] !== undefined) {
                totaisCategoria[atividade.categoria] += atividade.horas;
            }

            // Atualiza os totais por tipo espec√≠fico
            if (!totaisAtividade[atividade.tipoEspecifico]) {
                totaisAtividade[atividade.tipoEspecifico] = 0;
            }
            totaisAtividade[atividade.tipoEspecifico] += atividade.horas;

            // Adiciona a atividade na tabela
            const linha = document.createElement('tr');
            linha.innerHTML = `
                <td>${atividade.descricao}</td>
                <td>${atividade.categoria}</td>
                <td>${atividade.tipoEspecifico}</td>
                <td>${atividade.horas}</td>
                <td>${atividade.horasAprovadas !== undefined ? atividade.horasAprovadas.toFixed(2) : "0.00"}</td>
            `;
            corpoTabela.appendChild(linha);
        });

        // Ap√≥s carregar, atualizar os resumos
        atualizarResumo();
        atualizarResumoAtividade();
    } catch (error) {
        console.error("‚ùå Erro ao carregar atividades:", error);
        alert("Erro ao carregar atividades do banco de dados.");
    }
}


// üîÑ Carrega as atividades ao iniciar
document.addEventListener("DOMContentLoaded", () => {
    carregarAtividades();
});


